
==================== FINAL INTERFACE ====================
2017-07-07 02:29:23.399739 UTC

interface main@main:Main [family instance module] 8002
  interface hash: ffd834bf700d8eeab538985e8793726e
  ABI hash: 3b0ece6185e8bf08d2513f6f5e609b2e
  export-list hash: d6af38ee9a91fb4012fa62ce41643e4b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 055affa6803e6e9a509c92370727a7bb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9
                      string-conversions-0.4.0.1@string-conversions-0.4.0.1-5bhARACLQyXG4DLNegoSj4
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9:PageFiles.Page
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary 04731cb24bdd2d171e280dacabbc5b93
import  -/  binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Class b88eee4db2420047af9b40010da11191
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9:PageFiles.File 7d2e21d121a6a1838cf5d3e970986143
import  -/  redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9:PageFiles.Page 320c342f764da818377d5ace1d8dcbff
import  -/  redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9:Utilities.Config 50b8960bc16c4855f1c3fc27a5e3e132
import  -/  redbase-0.1.0.0@redbase-0.1.0.0-HbtF0e2Njw55GQaCsVoec9:Utilities.Errors 9cc01c29e933a8a658bc89f6c9f2d384
9a9ada096c11ee397ef51389a3ee2c94
  $fBinaryRecord :: Data.Binary.Class.Binary Main.Record
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Record
                  Main.$fBinaryRecord_$cput
                  Main.$fBinaryRecord_$cget
                  Main.$fBinaryRecord_$cputList -}
9a9ada096c11ee397ef51389a3ee2c94
  $fBinaryRecord1 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success Main.Record r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r5
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success Main.Record r5) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Main.$w$cget @ r5 ww1 ww2 ww3 ww4 w1 }) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fBinaryRecord_$cget :: Data.Binary.Get.Internal.Get Main.Record
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.$fBinaryRecord1
                  `cast`
                (Sym (Data.Binary.Get.Internal.N:Get[0] <Main.Record>_R)) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fBinaryRecord_$cput :: Main.Record -> Data.Binary.Put.Put
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Record) ->
                 case w of ww { Main.Person ww1 ww2 ->
                 (Data.Binary.Put.PairS
                    @ ()
                    GHC.Tuple.()
                    (let {
                       ds :: Data.ByteString.Builder.Internal.Builder
                       = case Data.Binary.Class.$w$cputList ww1 of ww3 { (#,#) ww4 ww5 ->
                         ww5 }
                     } in
                     let {
                       ds1 :: Data.ByteString.Builder.Internal.Builder
                       = case Data.Binary.Class.$w$cput1 ww2 of ww3 { (#,#) ww4 ww5 ->
                         ww5 }
                     } in
                     (\ @ r5 (eta :: Data.ByteString.Builder.Internal.BuildStep r5) ->
                      ds `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                        @ r5
                        (ds1 `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                           @ r5
                           eta))
                       `cast`
                     (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))))
                   `cast`
                 (Sym (Data.Binary.Put.N:PutM[0]) <()>_N) }) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fBinaryRecord_$cputList :: [Main.Record] -> Data.Binary.Put.Put
  {- Arity: 1 -}
9a9ada096c11ee397ef51389a3ee2c94
  $fGenericRecord :: GHC.Generics.Generic Main.Record
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Record
                  Main.$fGenericRecord_$cfrom
                  Main.$fGenericRecord_$cto -}
9a9ada096c11ee397ef51389a3ee2c94
  $fGenericRecord1 ::
    Main.Record
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Person" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "name")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "age")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Main.Record) ->
                 case x1 of wild { Main.Person g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "name")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "age")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      ('GHC.Base.Just "name")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      ('GHC.Base.Just "age")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Person" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "name")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "age")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R GHC.Types.Int)>_R) <x>_N) }) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fGenericRecord_$cfrom ::
    Main.Record -> GHC.Generics.Rep Main.Record x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fGenericRecord1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Main.Record>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Record" "Main" "main" 'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Person" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "name")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                        GHC.Generics.:*: GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "age")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R GHC.Types.Int))>_R))
                          (Sub (Sym (Main.Rep_Record[0]))) <x>_N) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fGenericRecord_$cto ::
    GHC.Generics.Rep Main.Record x -> Main.Record
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Main.Record x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Main.Rep_Record[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Record" "Main" "main" 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Person" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "name")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "age")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Int))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Person" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "name")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "age")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Int)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Main.Person
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "name")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "age")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P)) }) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fShowRecord :: GHC.Show.Show Main.Record
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Record
                  Main.$fShowRecord_$cshowsPrec
                  Main.$fShowRecord_$cshow
                  Main.$fShowRecord_$cshowList -}
9a9ada096c11ee397ef51389a3ee2c94
  $fShowRecord1 :: Main.Record -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Record) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Person ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
43f660fdab8b1a09a35eca34c990d708
  $fShowRecord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
48e0aa9e7083ec31f77cb24403c43446
  $fShowRecord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "age = "#) -}
1bda57e85164554312f36389233ef055
  $fShowRecord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
4e4ce17f9b4eebab02d9105bc336076c
  $fShowRecord5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name = "#) -}
a2a5b759cc24e3502c2c6010d26ad2d2
  $fShowRecord6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Person {"#) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fShowRecord_$cshow :: Main.Record -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Record) ->
                 Main.$fShowRecord_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fShowRecord_$cshowList :: [Main.Record] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Record
                   Main.$fShowRecord1) -}
9a9ada096c11ee397ef51389a3ee2c94
  $fShowRecord_$cshowsPrec ::
    GHC.Types.Int -> Main.Record -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Record)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Person ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
b5b60dcd754bc099732bd21e19f6d24a
  $s$fBinaryPage ::
    Data.Binary.Class.Binary (PageFiles.Page.Page Main.Record)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PageFiles.Page.Page Main.Record)
                  (PageFiles.Page.$fBinaryPage_$cput
                     @ Main.Record
                     Main.$fBinaryRecord)
                  (PageFiles.Page.$fBinaryPage_$cget
                     @ Main.Record
                     Main.$fBinaryRecord)
                  (PageFiles.Page.$fBinaryPage_$cputList
                     @ Main.Record
                     Main.$fBinaryRecord) -}
3638b10ba8b1c75d480457f85425a2cc
  $tc'Person :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10756901104406865812##
                   156267496560154259##
                   Main.$trModule
                   Main.$tc'Person1) -}
ea04c3d59a73c689b333af1bf1e9aff4
  $tc'Person1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Person"#) -}
d53cdb6b9f944bad7c83140310f5112f
  $tcRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9760781104518585070##
                   6639502823417724197##
                   Main.$trModule
                   Main.$tcRecord1) -}
833082d908dad2ea551cc8d0aeb393fa
  $tcRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Record"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
9a9ada096c11ee397ef51389a3ee2c94
  $w$cget ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success Main.Record r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r5
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success Main.Record r5) ->
                 Data.Binary.Class.$w$cget10
                   @ GHC.Types.Char
                   Data.Binary.Class.$fBinaryChar
                   @ r5
                   ww
                   ww1
                   ww2
                   ww3
                   (\ (i' :: Data.ByteString.Internal.ByteString)
                      (a1 :: [GHC.Types.Char])[OneShot] ->
                    case i' of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.Binary.Class.$w$cget9
                      @ r5
                      ww5
                      ww6
                      ww7
                      ww8
                      (\ (i'1 :: Data.ByteString.Internal.ByteString)
                         (a2 :: GHC.Types.Int)[OneShot] ->
                       w i'1 (Main.Person a1 a2)) })) -}
6f9931e399e6671b27b97528b54bf272
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p5 :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowRecord6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowRecord5
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Main.$fShowRecord4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowRecord3
                                         (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0#
                                                 ww4
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Main.$fShowRecord2
                                                    x) of ww5 { (#,#) ww6 ww7 ->
                                          GHC.Types.: @ GHC.Types.Char ww6 ww7 } })))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p5 w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p5 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
9a9ada096c11ee397ef51389a3ee2c94
  data Record
    = Person {name :: GHC.Base.String, age :: GHC.Types.Int}
9a9ada096c11ee397ef51389a3ee2c94
  axiom Rep_Record::
      GHC.Generics.Rep Main.Record
        = GHC.Generics.D1
            ('GHC.Generics.MetaData "Record" "Main" "main" 'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Person" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "name")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "age")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Types.Int)))
cb9f3cfd5b84480cfa36127361a665b7
  age :: Main.Record -> GHC.Types.Int
  RecSel Left Main.Record
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Record) ->
                 case ds of wild { Main.Person ds1 ds2 -> ds2 }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
35754fdbdee45ab7944a56289a8241d6
  name :: Main.Record -> GHC.Base.String
  RecSel Left Main.Record
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Record) ->
                 case ds of wild { Main.Person ds1 ds2 -> ds1 }) -}
instance [safe] Data.Binary.Class.Binary [Main.Record]
  = Main.$fBinaryRecord
instance [safe] GHC.Generics.Generic [Main.Record]
  = Main.$fGenericRecord
instance [safe] GHC.Show.Show [Main.Record] = Main.$fShowRecord
family instance GHC.Generics.Rep [Main.Record] = Main.Rep_Record
"SPEC/Main $fBinaryPage @ Record" [ALWAYS] forall ($dBinary :: Data.Binary.Class.Binary
                                                                 Main.Record)
  PageFiles.Page.$fBinaryPage @ Main.Record $dBinary
  = Main.$s$fBinaryPage
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

